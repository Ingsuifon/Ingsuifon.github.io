<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Ingsuifon.github.io</id>
    <title>影随风</title>
    <updated>2020-03-13T12:57:21.343Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Ingsuifon.github.io"/>
    <link rel="self" href="https://Ingsuifon.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://Ingsuifon.github.io/images/avatar.png</logo>
    <icon>https://Ingsuifon.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 影随风</rights>
    <entry>
        <title type="html"><![CDATA[汇编语言学习：基本语言元素]]></title>
        <id>https://Ingsuifon.github.io/post/hui-bian-yu-yan-ji-chu/</id>
        <link href="https://Ingsuifon.github.io/post/hui-bian-yu-yan-ji-chu/">
        </link>
        <updated>2020-03-13T10:03:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="整数常量">整数常量</h3>
<p>由一个可选前置符号、一个或多个数字以及一个指明基数的可选基数字符组成：<br>
[{+ | -}] digits [radix]</p>
<table>
<thead>
<tr>
<th>h</th>
<th>十六进制</th>
<th>r</th>
<th>编码实数</th>
</tr>
</thead>
<tbody>
<tr>
<td>q/o</td>
<td>八进制</td>
<td>t</td>
<td>十进制（备用）</td>
</tr>
<tr>
<td>d</td>
<td>十进制</td>
<td>y</td>
<td>二进制（备用）</td>
</tr>
<tr>
<td>b</td>
<td>二进制</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>26     ;十进制<br>
26d     ;十进制<br>
11010011b   ;二进制<br>
42o    ;八进制</p>
<h3 id="整形常量表达式">整形常量表达式</h3>
<p>包含整数常量和算术运算符，计算结果必须是一个整数，并可用32位来存放。</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>名称</th>
<th>优先级</th>
</tr>
</thead>
<tbody>
<tr>
<td>()</td>
<td>圆括号</td>
<td>1</td>
</tr>
<tr>
<td>+，-</td>
<td>一元加、减</td>
<td>2</td>
</tr>
<tr>
<td>*，/</td>
<td>乘、除</td>
<td>3</td>
</tr>
<tr>
<td>MOD</td>
<td>取模</td>
<td>3</td>
</tr>
<tr>
<td>+，-</td>
<td>加、减</td>
<td>4</td>
</tr>
</tbody>
</table>
<h3 id="实数常量">实数常量</h3>
<p>用于表示一个十进制实数和编码（十六进制）实数。十进制实数包含一个可选符号，其后跟随一个整数，一个十进制小数点，一个可选的表示小数部分的整数和一个可选的指数。<br>
[sign] integer. [integer] [exponent]<br>
符号和指数格式如下：<br>
sign: {+,-}<br>
exponent: E [{+,-}] integer<br>
2.<br>
+3.0<br>
-44.2E+05<br>
26.E5</p>
<h3 id="字符常量">字符常量</h3>
<p>用单引号或双引号包含的一个字符。<br>
'a'<br>
&quot;B&quot;</p>
<h3 id="字符串常量">字符串常量</h3>
<p>用单引号或双引号包含的一个字符（含空格）序列。<br>
'ABC'<br>
&quot;Hello world&quot;</p>
<h3 id="保留字">保留字</h3>
<p>默认情况下不区分大小写。</p>
<ul>
<li>指令助记符，如MOV、ADD、MUL</li>
<li>寄存器名称</li>
<li>伪指令，告诉汇编器如何汇编程序</li>
<li>属性，提供变量和操作数的大小与使用信息，如BYTE和WORD</li>
<li>运算符</li>
<li>预定义符号，如@data</li>
</ul>
<h3 id="标识符">标识符</h3>
<ul>
<li>可以包含1-247个字符</li>
<li>不区分大小写</li>
<li>第一个字母必须为字母、下划线、@、？或$</li>
<li>不能与保留字相同</li>
</ul>
<h3 id="伪指令">伪指令</h3>
<ul>
<li>伪指令是嵌入源代码中的命令，由汇编器识别和执行。</li>
<li>可以定义变量、宏和子程序。</li>
<li>为内存段分配名称，执行其他许多与汇编器相关的工作</li>
<li>默认不区分大小写</li>
</ul>
<p>DWORD伪指令告诉汇编器在程序中为一个双字变量保留空间。<br>
MOV指令在运行时执行。<br>
myVar DWORD 26<br>
mov eax, myVar<br>
 <strong>定义段</strong><br>
 程序中的段具有不同的作用。</p>
<ul>
<li>.data：定义数据区</li>
<li>.code：定义代码区</li>
<li>.stack 100h：定义堆栈区并设置大小</li>
</ul>
<h3 id="指令">指令</h3>
<p>是一种语句，在程序汇编时变得可执行，汇编器将其翻译为机器语言，并在运行时由CPU加载和执行。一条指令有四个组成部分：</p>
<ul>
<li>标号（可选）</li>
<li>指令助记符（必需）</li>
<li>操作数（看情况）</li>
<li>注释（可选）</li>
</ul>
<p> 1、标号：一种标识符，可以标记数据和指令的位置，分为数据标号和指令标号。<br>
 <strong>数据标号</strong>标识变量的位置，相当于变量的引用。下面的语句定义了名为count的变量。<br>
 count DWORD 100<br>
 <strong>指令标号</strong>用于标识一块程序代码区，必须用冒号结束，用于跳转和循环指令。下面的JMP指令创建了一个循环，跳转到target标识的位置。<br>
 target:<br>
  mov  ax, bx<br>
  ...<br>
  jmp  target</p>
<p> 2、指令助记符：标记一条指令的短单词。如MOV，ADD和SUB。<br>
 3、操作数：指令输入输出的值。操作数可以是寄存器、内存操作数、整数表达式和输入输出端口。当指令有多个操作数时，通常第一个是目的操作数，第二个是源操作数。<br>
 4、注释：通常包含下列信息：</p>
<ul>
<li>程序目标的说明</li>
<li>程序创建者或修改者的名单</li>
<li>程序创建或修改的日期</li>
<li>程序实现技术的说明</li>
</ul>
<p>注释有两种指定方法：</p>
<ul>
<li>单行注释：用分号开始</li>
<li>块注释：用COMMENT伪指令和一个用户定义的符号开始，以用户定义的符号结束。<br>
COMMENT !<br>
  This line is a comment.<br>
  This line is a comment.<br>
!</li>
</ul>
<p> 5、NOP（空操作）指令：在程序空间中占一字节，有时被编译器和汇编器用于将代码对齐到有效的地址边界。在下面的例子中，第一条指令MOV生成了3字节的机器代码，NOP指令就把第三条指令的地址对齐到双字节边界：<br>
00000000  66 8B C3  mov ax, bx<br>
00000003  90      nop<br>
00000004  8B D1    mov edx, ecx</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello, Rust]]></title>
        <id>https://Ingsuifon.github.io/post/hello-rust/</id>
        <link href="https://Ingsuifon.github.io/post/hello-rust/">
        </link>
        <updated>2020-03-13T00:51:21.000Z</updated>
        <content type="html"><![CDATA[<p>Rust是一门内存安全同时有着不输于C++性能的系统编程语言。粗略地总结一下今天学习的内容。</p>
<h3 id="环境安装">环境安装</h3>
<p>在Rust官方网站下载<a href="https://www.rust-lang.org/zh-CN/tools/install">rustup</a>后根据提示完成安装即可。</p>
<h3 id="hello-wold">Hello, wold</h3>
<p>我们在记事本中写入如下代码：</p>
<pre><code class="language-cpp">fn main() {
    println!(&quot;Hello, world!&quot;);
}
</code></pre>
<p><strong>fn</strong>用来声明一个新函数，空格后面跟着的为函数名，()内为函数参数，其中main函数为程序入口。函数体用{}包围。<br>
函数体中，<strong>println!</strong> 调用的是一个宏(marco)而不是函数，如果是函数则没有!。<br>
把文件保存为 <strong>.rs</strong>格式后，打开cmd或PowerShell，进入该文件所在目录，执行<strong>rustc xxx.rs</strong>命令进行编译，然后再执行 <strong>./xxx</strong>来运行该程序。</p>
<h3 id="cargo">Cargo</h3>
<p>Cargo是 Rust的构建系统和包管理器。请尽量使用Cargo来管理Rust项目，因为它可以为你处理很多任务，比如构建代码、下载依赖库并编译这些库。（我们把代码所需要的库叫做<strong>依赖</strong>（dependencies））。<br>
在projects目录下，执行<strong>cargo new hello</strong>命令，新建名为hello的目录，进入hello目录并列出文件，将会看到Cargo生成了两个文件和一个目录：一个 Cargo.toml 文件，一个 src 目录，以及位于 src 目录中的 main.rs 文件。它也在hello目录初始化了一个 git 仓库，以及一个 .gitignore 文件。<br>
执行<strong>cargo build</strong>命令，会对该项目进行编译。<br>
执行<strong>cargo run</strong>命令，会对该项目编译并运行。<br>
Cargo还提供了一个叫<strong>cargo check</strong>的命令。该命令快速检查代码确保其可以编译，但并不产生可执行文件。</p>
<h3 id="猜数字">猜数字</h3>
<p>官方文档提供的第二个示例。</p>
<pre><code class="language-cpp">use std::io; //提供标准输入的库
use std::cmp::Ordering; //提供cmp方法和Ordering类型
use rand::Rng; //Rng是一个trait，暂时不懂，它提供随机数生成器应实现的方法
fn main() {
	println!(&quot;猜猜看！&quot;);
	let secret_num = rand::thread_rng().gen_range(1, 101);
	println!(&quot;The secret num is {}&quot;, secret_num);
	
	loop {
		println!(&quot;请输入你的猜测&quot;);
		
		let mut guess = String::new();
		io::stdin().read_line(&amp;mut guess).expect(&quot;Failed to read line&quot;);
		let guess: u32 = match guess.trim().parse() {
			Ok(num) =&gt; num,
			Err(_) =&gt; continue,
		};
		println!(&quot;You guessed: {}&quot;, guess);
		
		match guess.cmp(&amp;secret_num) {
			Ordering::Less =&gt; println!(&quot;猜小了&quot;),
			Ordering::Greater =&gt; println!(&quot;猜大了&quot;),
			Ordering::Equal =&gt; {
				println!(&quot;猜对了！&quot;);
				break;
			}
		}
	}
}
</code></pre>
<p><strong>use</strong>：引入到当前作用域，类似C++的using<br>
<strong>std::io</strong>：std是标准库，io库来自std库，双冒号语法类似C++<br>
<strong>let</strong>：用于创建变量，在rust中变量默认是不可变的（这确实惊到我了）<br>
<strong>let mut</strong>：创建可变的变量<br>
<strong>println!(&quot;{}&quot;, var)</strong>：里面的花括号是占位符，后面是参数列表<br>
<strong>loop</strong>：创建一个无限循环<br>
<strong>String::new()</strong>：String是一个类型，new()是它的关联函数，不依赖于实例对象，用于创建对象<br>
<strong>match</strong>：条件分支<br>
<strong>&amp;mut guess</strong>：引用变量guess，因为要读取输入的内容到guess里所以要加mut</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《算法》1.4节部分题解]]></title>
        <id>https://Ingsuifon.github.io/post/lesslesssuan-fa-greatergreater-14-jie-bu-fen-ti-jie/</id>
        <link href="https://Ingsuifon.github.io/post/lesslesssuan-fa-greatergreater-14-jie-bu-fen-ti-jie/">
        </link>
        <updated>2020-03-12T12:01:24.000Z</updated>
        <content type="html"><![CDATA[<p>14<br>
4-sum。为4-sum设计一个算法。</p>
<pre><code class="language-java">public int fourSum(int[] a) {
    int len = a.length;
    int cnt = 0;
    for (int l = 0; l &lt; len - 3; l++) {
        for (int i = l + 1; i &lt; len - 2; i++) {
            for (int j = i + 1, k = len - 1; j &lt; k;) {
                if (a[l] + a[i] + a[j] + a[k] &lt; 0) {
                    j++;
                } else if (a[l] + a[i] + a[j] + a[k] &gt; 0) {
                    k--;
                } else {
                    cnt++;
                    j++;
                    k--;
                }
            }
        }
    }
    return cnt;
}
</code></pre>
<p>15<br>
快速3-sum。作为热身，使用一个线性级别的算法实现TwoSumFaster来计算已排序的数组中和为0的整数对的数量。用相同的思想为3-sum问题给出一个平方级别的算法。<br>
双指针法前后夹击</p>
<pre><code class="language-java">public class TwoSumFaster {
    public int twoSumFaster(int[] a) {
        int cnt = 0;
        int len = a.length;
        for (int j = 0, k = len - 1; j &lt; k;) {
            if (a[j] + a[k] &lt; 0) {
                j++;
            } else if (a[j] + a[k] &gt; 0) {
                k--;
            } else {
                j++;
                k--;
                ++cnt;
            }
        }
        return cnt;
    }
}
</code></pre>
<p>类似的：</p>
<pre><code class="language-java">public class ThreeSumFaster {   
    public int threeSumFaster(long[] a) {
        int cnt = 0;
        int len = a.length;
        for (int j = 0; j &lt; len - 2 ; j ++) {
            for(int k = j + 1,h = len -1;k &lt; h;){
                if (a[j] + a[k] + a[h] &lt; 0) {
                    k++;
                } else if (a[j] + a[k] + a[h] &gt; 0) {
                    h--;
                } else {
                    k++;
                    h--;
                    ++cnt;
                }
            }
        }
        return cnt;
    }
}
</code></pre>
<p>16<br>
最接近的一对（一维）。</p>
<pre><code class="language-java">public static void ClosestPair(double[] arr) {
	Arrays.sort(arr);
    double min = Double.MAX_VALUE;
    int index1 = 0;
    int index2 = 0;
    for(int i = 0; i &lt; arr.length - 1; i++) {
        if(arr[i + 1] - arr[i] &lt; min) {
            min = arr[i + 1] - arr[i];
            index1 = i;
            index2 = i + 1;
        }
    }
    System.out.println(arr[index1] + &quot; &quot; + arr[index2]);
}
</code></pre>
<p>17<br>
最遥远的一对（一维）。</p>
<pre><code class="language-java">public static void FarthestPair(double[] arr) {
    int max = 0, min = 0;
    for(int i = 1; i &lt; arr.length; i++) {
        if(arr[i] &gt; arr[max])
            max = i;
        else if(arr[i] &lt; arr[min])
            min = i;
    }
    System.out.println(arr[max] + &quot; &quot; + arr[min]);
}
</code></pre>
<p>18<br>
数组的局部最小元素。<br>
1、找到一个局部最小元素即可，不用找全。<br>
2、数组可能含有0个元素。<br>
3、优先检查区间端点处的单边极值。</p>
<pre><code class="language-java">public static int localMin(int[] arr) {
        if(arr == null || arr.length == 0)
            return -1;
        if(arr.length == 1 || arr[0] &lt; arr[1])
            return 0;
        if(arr[arr.length - 1] &lt; arr[arr.length - 2])
            return arr.length - 1;
        int left = 1;
        int right = arr.length - 2;
        while(left &lt; right) {
            int mid = (left + right) / 2;
            if(arr[mid - 1] &gt; arr[mid] &amp;&amp; arr[mid + 1] &gt; arr[mid])
                return mid;
            else if(arr[mid - 1] &lt; arr[mid])
                right = mid - 1;
            else
                left = mid + 1;
        }
        return left;
    }
</code></pre>
<p>19<br>
矩阵的局部最小元素。<br>
中文版翻译有误，此题要求的运行时间和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>成正比，否则无法类比上一题。<br>
不过的确有O(n)的实现。<br>
官网原文：<br>
<strong>Local minimum in a matrix</strong>. Given an n-by-n array a[] of <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> distinct integers, design an algorithm that runs in time proportional to <strong>n log n</strong> to find a local minimum: an pair of indices i and j such that a[i][j] &lt; a[i+1][j], a[i][j] &lt; a[i][j+1], a[i][j] &lt; a[i-1][j], and a[i][j] &lt; a[i][j-1] (assuming the neighboring entry is in bounds).<br>
Extra credit: Design an algorithm that takes times proportional to <strong>n</strong>.</p>
<p>找到第n/2行中的最小项，比如a[n/2][j]。如果是局部最小值，则返回。否则，检查它上下两个相邻元素a[n/2-1][j]和a[n/2+1][j]，在较小的相邻元素的半边中重复。</p>
<pre><code class="language-java">static class Pos {
    int row;
    int col;
    Pos(int a, int b) {
        row = a;
        col = b;
    }
}
private static int MinPos(int[] a) {
	if(a == null || a.length == 0)
	        return -1;
    int min = 0;
    for(int i = 1; i &lt; a.length; i++) {
        if(a[i] &lt; a[min])
            min = i;
    }
    return min;
}
public static Pos BinarySearch(int[][] arr) {
    if(arr.length == 1)
        return new Pos(0, 0);
    else {
        int min = MinPos(arr[0]);
        if(arr[0][min] &lt; arr[1][min])
            return new Pos(0, min);
        min = MinPos(arr[arr.length - 1]);
        if(arr[arr.length - 1][min] &lt; arr[arr.length - 2][min])
            return new Pos(arr.length - 1, min);
    }
    int up = 1;
    int down = arr.length - 2;
    int mid = 0;
    int min = 0;
    while(up &lt;= down) {
        mid = (up + down) / 2;
        min = MinPos(arr[mid]);
        if(arr[mid][min] &lt; arr[mid - 1][min] &amp;&amp; arr[mid][min] &lt; arr[mid + 1][min])
            return new Pos(mid, min);
        else if(arr[mid][min] &gt; arr[mid - 1][min])
            down = mid - 1;
        else
            up = mid + 1;
    }
    return new Pos(mid, min);
}
</code></pre>
<p>22<br>
仅使用加减实现的二分查找。（斐波那契查找）</p>
<p>思路：与二分查找类似，首先把整个数组扩充到一个斐波那契数的长度，多出来的部分用原数组的最后一个元素填充。假设扩充后数组长度为F[k]，则该数组可以被划分成长度为F[k-2]和F[k-1]的两个部分，划分点我们设为left + F[k-2]，像二分查找那样，先检查这个位置上的元素是不是查找目标，如果是则直接返回，否则根据与目标的大小比较缩小区间继续搜索。</p>
<pre><code class="language-java">private static int[] F;
public static int Init(int n) {
    F = new int[20];
    F[0] = 0;
    F[1] = 1;
    int i = 2;
    while (i &lt; 20) {
        F[i] = F[i - 1] + F[i - 2];
        if(F[i] &gt; n)  //找到一个最接近原数组长度的斐波那契数
            break;
        i++;
    }
    return i;
}
public static int FibonacciSearch(int key, int[] arr) {
    int k = Init(arr.length);
    int[] tmp = Arrays.copyOf(arr, F[k]);   //扩充原数组
    for(int i = arr.length; i &lt; tmp.length; i++)
        tmp[i] = arr[arr.length - 1];   //用最后一个元素填充后面的位置
    int low = 0;
    int high = tmp.length - 1;
    while(low &lt;= high) {
        int mid = low + F[k-2];
        if(key &lt; tmp[mid]) {
            high = mid;
            k -= 2;
        }
        else if(key &gt; tmp[mid]) {
            low = mid + 1;
            k -= 1;
        }
        else {
            if(mid &lt; arr.length)
                return mid;
            else
                return arr.length - 1;
        }
    }
    return -1;
}
</code></pre>
<p>24<br>
扔鸡蛋。假设你面前有一栋N层的大楼和许多鸡蛋，假设将鸡蛋从F层或更高的地方扔下，鸡蛋才会碎，否则不会碎。首先，设计一种成本为摔碎鸡蛋的数量为~lgN的策略来确定F的值，然后想办法将成本降低到~2lgF。</p>
<p>思路：前者的实现就是二分查找，这里就不写了。后者的实现是O(lgF)的，而我们并不知道F是多少，所以只能从1开始加倍，直到我们能让鸡蛋破碎的高度up为止，这里的成本是~lgF的，然后在这个高度和它的一半的位置down之间用二分查找来找F，这里的成本也是~lgF的，所以加起来就是~2lgF。</p>
<p>需要注意的是，我们只知道能否打碎鸡蛋，也就是我们只知道mid是否&gt;=F，所以这里的二分查找要精确到up和down重合为止。</p>
<pre><code class="language-java">public static int throwEgg(int n) {
    int F = (int)(Math.random() * n + 1);
    int up = 1;
    while(up &lt; F)
        up &lt;&lt;= 1;
    int down = up &gt;&gt; 1;
    while (down &lt; up) {
        int mid = (down + up) / 2;
        if(mid &gt;= F)
            up = mid;
        else
            down = mid + 1;
    }
    return up;
}
</code></pre>
<p>25<br>
扔两个鸡蛋。和上一题相同，但现在你只有两个鸡蛋，而你的成本模型则是扔鸡蛋的次数。设计一种策略，最多扔<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><msqrt><mi>N</mi></msqrt></mrow><annotation encoding="application/x-tex">2\sqrt{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.11333499999999996em;"></span><span class="mord">2</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9266650000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:-2.886665em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11333499999999996em;"><span></span></span></span></span></span></span></span></span>次鸡蛋即可判断F的值，然后想办法把这个成本降低到~<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><msqrt><mi>F</mi></msqrt></mrow><annotation encoding="application/x-tex">c\sqrt{F}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.11333499999999996em;"></span><span class="mord mathdefault">c</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9266650000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span></span></span><span style="top:-2.886665em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11333499999999996em;"><span></span></span></span></span></span></span></span></span>次。</p>
<p>前者实现：把一个鸡蛋从第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msqrt><mi>N</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.11333499999999996em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9266650000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:-2.886665em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11333499999999996em;"><span></span></span></span></span></span></span></span></span>层、第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><msqrt><mi>N</mi></msqrt></mrow><annotation encoding="application/x-tex">2\sqrt{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.11333499999999996em;"></span><span class="mord">2</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9266650000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:-2.886665em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11333499999999996em;"><span></span></span></span></span></span></span></span></span>层、第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><msqrt><mi>N</mi></msqrt></mrow><annotation encoding="application/x-tex">3\sqrt{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.11333499999999996em;"></span><span class="mord">3</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9266650000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:-2.886665em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11333499999999996em;"><span></span></span></span></span></span></span></span></span>层……扔下去，直到它在第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><msqrt><mi>N</mi></msqrt></mrow><annotation encoding="application/x-tex">k\sqrt{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.11333499999999996em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9266650000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:-2.886665em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11333499999999996em;"><span></span></span></span></span></span></span></span></span>层破碎为止，然后把另一个鸡蛋从第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo>)</mo><msqrt><mi>N</mi></msqrt></mrow><annotation encoding="application/x-tex">(k-1)\sqrt{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.176665em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9266650000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:-2.886665em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11333499999999996em;"><span></span></span></span></span></span></span></span></span>层开始逐层往上向下丢，直到破碎位置，那一层就是F层。</p>
<pre><code class="language-java">public static int throwTwoEggs(int n) {
    int F = (int)(Math.random() * n + 1);
    int m = (int)Math.sqrt(n);
    int up = 1;
    while (up * m &lt; F)
        up++;
    int down = up - 1;
    int high = down * m + 1;
    while (high &lt; F)
        high++;
    return high;
}
</code></pre>
<p>后者实现：和第24题的第二种实现类似，我们从第1层开始找 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>i</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">i^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 的层，直到鸡蛋破碎，然后线性搜索即可。</p>
<pre><code class="language-java">public static int throwTwoEggs(int n) {
    int F = (int)(Math.random() * n + 1);
    int up = 1;
    while (up * up &lt; F)
        up++;
    int down = up - 1;
    int high = down * down + 1;
    while (high &lt; F)
        high++;
    return high;
}
</code></pre>
<p>34<br>
热还是冷。设计一个算法在~2lgN之内猜出1到N之间的一个秘密的整数，再设计一个算法在~1lgN之内找到这个数。<br>
~2lgN：每次猜区间端点来缩小区间</p>
<pre><code class="language-java">public static int HotOrCold(int n) {
    int[] a = new int[n + 1];
    for(int i = 1; i &lt;= n; i++)
        a[i] = i;
    int num = (int)(Math.random() * n + 1);
    int guess1 = 1;
    int guess2 = n;
    while (true) {
        if(guess1 == num)
            return guess1;
        else if(guess2 == num)
            return guess2;
        else if(Math.abs(num - guess2) &lt; Math.abs(num - guess1))
            guess1 = (guess1 + guess2) / 2;
        else
            guess2 = (guess1 + guess2) / 2;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Junity_反射_注解]]></title>
        <id>https://Ingsuifon.github.io/post/test/</id>
        <link href="https://Ingsuifon.github.io/post/test/">
        </link>
        <updated>2020-03-12T11:19:47.000Z</updated>
        <content type="html"><![CDATA[<h1 id="今日内容">今日内容</h1>
<pre><code>1. Junit单元测试
2. 反射
3. 注解
</code></pre>
<h2 id="junit单元测试">Junit单元测试：</h2>
<pre><code>* 测试分类：
	1. 黑盒测试：不需要写代码，给输入值，看程序是否能够输出期望的值。
	2. 白盒测试：需要写代码的。关注程序具体的执行流程。

* Junit使用：白盒测试
	* 步骤：
		1. 定义一个测试类(测试用例)
			* 建议：
				* 测试类名：被测试的类名Test		CalculatorTest
				* 包名：xxx.xxx.xx.test		cn.itcast.test

		2. 定义测试方法：可以独立运行
			* 建议：
				* 方法名：test测试的方法名		testAdd()  
				* 返回值：void
				* 参数列表：空参

		3. 给方法加@Test
		4. 导入junit依赖环境

	* 判定结果：
		* 红色：失败
		* 绿色：成功
		* 一般我们会使用断言操作来处理结果
			* Assert.assertEquals(期望的结果,运算的结果);

	* 补充：
		* @Before:
			* 修饰的方法会在测试方法之前被自动执行
		* @After:
			* 修饰的方法会在测试方法执行之后自动被执行
</code></pre>
<h2 id="反射框架设计的灵魂">反射：框架设计的灵魂</h2>
<pre><code>* 框架：半成品软件。可以在框架的基础上进行软件开发，简化编码
* 反射：将类的各个组成部分封装为其他对象，这就是反射机制
	* 好处：
		1. 可以在程序运行过程中，操作这些对象。
		2. 可以解耦，提高程序的可扩展性。


* 获取Class对象的方式：
	1. Class.forName(&quot;全类名&quot;)：将字节码文件加载进内存，返回Class对象
		* 多用于配置文件，将类名定义在配置文件中。读取文件，加载类
	2. 类名.class：通过类名的属性class获取
		* 多用于参数的传递
	3. 对象.getClass()：getClass()方法在Object类中定义着。
		* 多用于对象的获取字节码的方式

	* 结论：
		同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。


* Class对象功能：
	* 获取功能：
		1. 获取成员变量们
			* Field[] getFields() ：获取所有public修饰的成员变量
			* Field getField(String name)   获取指定名称的 public修饰的成员变量

			* Field[] getDeclaredFields()  获取所有的成员变量，不考虑修饰符
			* Field getDeclaredField(String name)  
		2. 获取构造方法们
			* Constructor&lt;?&gt;[] getConstructors()  
			* Constructor&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes)  

			* Constructor&lt;T&gt; getDeclaredConstructor(类&lt;?&gt;... parameterTypes)  
			* Constructor&lt;?&gt;[] getDeclaredConstructors()  
		3. 获取成员方法们：
			* Method[] getMethods()  
			* Method getMethod(String name, 类&lt;?&gt;... parameterTypes)  

			* Method[] getDeclaredMethods()  
			* Method getDeclaredMethod(String name, 类&lt;?&gt;... parameterTypes)  

		4. 获取全类名	
			* String getName()  


* Field：成员变量
	* 操作：
		1. 设置值
			* void set(Object obj, Object value)  
		2. 获取值
			* get(Object obj) 

		3. 忽略访问权限修饰符的安全检查
			* setAccessible(true):暴力反射



* Constructor:构造方法
	* 创建对象：
		* T newInstance(Object... initargs)  

		* 如果使用空参数构造方法创建对象，操作可以简化：Class对象的newInstance方法


* Method：方法对象
	* 执行方法：
		* Object invoke(Object obj, Object... args)  

	* 获取方法名称：
		* String getName:获取方法名


* 案例：
	* 需求：写一个&quot;框架&quot;，不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行其中任意方法
		* 实现：
			1. 配置文件
			2. 反射
		* 步骤：
			1. 将需要创建的对象的全类名和需要执行的方法定义在配置文件中
			2. 在程序中加载读取配置文件
			3. 使用反射技术来加载类文件进内存
			4. 创建对象
			5. 执行方法
</code></pre>
<h2 id="注解">注解：</h2>
<pre><code>* 概念：说明程序的。给计算机看的
* 注释：用文字描述程序的。给程序员看的

* 定义：注解（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。
* 概念描述：
	* JDK1.5之后的新特性
	* 说明程序的
	* 使用注解：@注解名称
	

* 作用分类：
	①编写文档：通过代码里标识的注解生成文档【生成文档doc文档】
	②代码分析：通过代码里标识的注解对代码进行分析【使用反射】
	③编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查【Override】


* JDK中预定义的一些注解
	* @Override	：检测被该注解标注的方法是否是继承自父类(接口)的
	* @Deprecated：该注解标注的内容，表示已过时
	* @SuppressWarnings：压制警告
		* 一般传递参数all  @SuppressWarnings(&quot;all&quot;)

* 自定义注解
	* 格式：
		元注解
		public @interface 注解名称{
			属性列表;
		}

	* 本质：注解本质上就是一个接口，该接口默认继承Annotation接口
		* public interface MyAnno extends java.lang.annotation.Annotation {}

	* 属性：接口中的抽象方法
		* 要求：
			1. 属性的返回值类型有下列取值
				* 基本数据类型
				* String
				* 枚举
				* 注解
				* 以上类型的数组

			2. 定义了属性，在使用时需要给属性赋值
				1. 如果定义属性时，使用default关键字给属性默认初始化值，则使用注解时，可以不进行属性的赋值。
				2. 如果只有一个属性需要赋值，并且属性的名称是value，则value可以省略，直接定义值即可。
				3. 数组赋值时，值使用{}包裹。如果数组中只有一个值，则{}可以省略
	
	* 元注解：用于描述注解的注解
		* @Target：描述注解能够作用的位置
			* ElementType取值：
				* TYPE：可以作用于类上
				* METHOD：可以作用于方法上
				* FIELD：可以作用于成员变量上
		* @Retention：描述注解被保留的阶段
			* @Retention(RetentionPolicy.RUNTIME)：当前被描述的注解，会保留到class字节码文件中，并被JVM读取到
		* @Documented：描述注解是否被抽取到api文档中
		* @Inherited：描述注解是否被子类继承


* 在程序使用(解析)注解：获取注解中定义的属性值
	1. 获取注解定义的位置的对象  （Class，Method,Field）
	2. 获取指定的注解
		* getAnnotation(Class)
		//其实就是在内存中生成了一个该注解接口的子类实现对象

	            public class ProImpl implements Pro{
	                public String className(){
	                    return &quot;cn.itcast.annotation.Demo1&quot;;
	                }
	                public String methodName(){
	                    return &quot;show&quot;;
	                }
	            }
	3. 调用注解中的抽象方法获取配置的属性值


* 案例：简单的测试框架
* 小结：
	1. 以后大多数时候，我们会使用注解，而不是自定义注解
	2. 注解给谁用？
		1. 编译器
		2. 给解析程序用
	3. 注解不是程序的一部分，可以理解为注解就是一个标签</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://Ingsuifon.github.io/post/hello-gridea/</id>
        <link href="https://Ingsuifon.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>